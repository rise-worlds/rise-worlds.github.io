<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Naitive on Rise的自留地</title><link>https://blogs.qipai360.cn/tags/naitive/</link><description>Recent content in Naitive on Rise的自留地</description><generator>Hugo</generator><language>zh-CN</language><lastBuildDate>Sat, 03 Jun 2023 14:48:29 +0800</lastBuildDate><atom:link href="https://blogs.qipai360.cn/tags/naitive/rss.xml" rel="self" type="application/rss+xml"/><item><title>Android扩展知识点</title><link>https://blogs.qipai360.cn/post/android-extension-knowledge-points/</link><pubDate>Sat, 03 Jun 2023 14:48:29 +0800</pubDate><guid>https://blogs.qipai360.cn/post/android-extension-knowledge-points/</guid><description>&lt;ul&gt;
&lt;li&gt;
&lt;a href="#art" title="ART" &gt;
 ART
 
&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href="#art-%e5%8a%9f%e8%83%bd" title="ART 功能" &gt;
 ART 功能
 
&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href="#%e9%a2%84%e5%85%88-aot-%e7%bc%96%e8%af%91" title="预先 (AOT) 编译" &gt;
 预先 (AOT) 编译
 
&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#%e5%9e%83%e5%9c%be%e5%9b%9e%e6%94%b6%e4%bc%98%e5%8c%96" title="垃圾回收优化" &gt;
 垃圾回收优化
 
&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#%e5%bc%80%e5%8f%91%e5%92%8c%e8%b0%83%e8%af%95%e6%96%b9%e9%9d%a2%e7%9a%84%e4%bc%98%e5%8c%96" title="开发和调试方面的优化" &gt;
 开发和调试方面的优化
 
&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#art-gc" title="ART GC" &gt;
 ART GC
 
&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#hook" title="Hook" &gt;
 Hook
 
&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href="#%e5%9f%ba%e6%9c%ac%e6%b5%81%e7%a8%8b" title="基本流程" &gt;
 基本流程
 
&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#%e4%bd%bf%e7%94%a8%e7%a4%ba%e4%be%8b" title="使用示例" &gt;
 使用示例
 
&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#proguard" title="Proguard" &gt;
 Proguard
 
&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href="#%e8%a7%84%e5%88%99" title="规则" &gt;
 规则
 
&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#%e5%85%ac%e5%85%b1%e6%a8%a1%e6%9d%bf" title="公共模板" &gt;
 公共模板
 
&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#%e5%b8%b8%e7%94%a8%e7%9a%84%e8%87%aa%e5%ae%9a%e4%b9%89%e6%b7%b7%e6%b7%86%e8%a7%84%e5%88%99" title="常用的自定义混淆规则" &gt;
 常用的自定义混淆规则
 
&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#aar%e4%b8%ad%e5%a2%9e%e5%8a%a0%e7%8b%ac%e7%ab%8b%e7%9a%84%e6%b7%b7%e6%b7%86%e9%85%8d%e7%bd%ae" title="aar中增加独立的混淆配置" &gt;
 aar中增加独立的混淆配置
 
&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#%e6%a3%80%e6%9f%a5%e6%b7%b7%e6%b7%86%e5%92%8c%e8%bf%bd%e8%b8%aa%e5%bc%82%e5%b8%b8" title="检查混淆和追踪异常" &gt;
 检查混淆和追踪异常
 
&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#%e6%9e%b6%e6%9e%84" title="架构" &gt;
 架构
 
&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href="#mvc" title="MVC" &gt;
 MVC
 
&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#mvp" title="MVP" &gt;
 MVP
 
&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#mvvm" title="MVVM" &gt;
 MVVM
 
&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#jetpack" title="Jetpack" &gt;
 Jetpack
 
&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href="#%e6%9e%b6%e6%9e%84-1" title="架构" &gt;
 架构
 
&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#%e4%bd%bf%e7%94%a8%e7%a4%ba%e4%be%8b-1" title="使用示例" &gt;
 使用示例
 
&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#ndk-%e5%bc%80%e5%8f%91" title="NDK 开发" &gt;
 NDK 开发
 
&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href="#jni-%e5%9f%ba%e7%a1%80" title="JNI 基础" &gt;
 JNI 基础
 
&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href="#%e6%95%b0%e6%8d%ae%e7%b1%bb%e5%9e%8b" title="数据类型" &gt;
 数据类型
 
&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#string-%e5%ad%97%e7%ac%a6%e4%b8%b2%e5%87%bd%e6%95%b0%e6%93%8d%e4%bd%9c" title="String 字符串函数操作" &gt;
 String 字符串函数操作
 
&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#%e5%b8%b8%e7%94%a8-jni-%e8%ae%bf%e9%97%ae-java-%e5%af%b9%e8%b1%a1%e6%96%b9%e6%b3%95" title="常用 JNI 访问 Java 对象方法" &gt;
 常用 JNI 访问 Java 对象方法
 
&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#ndk-%e5%bc%80%e5%8f%91-1" title="NDK 开发" &gt;
 NDK 开发
 
&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href="#%e5%9f%ba%e7%a1%80%e5%bc%80%e5%8f%91%e6%b5%81%e7%a8%8b" title="基础开发流程" &gt;
 基础开发流程
 
&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#systemloadlibrary" title="System.loadLibrary()" &gt;
 System.loadLibrary()
 
&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#cmake-%e6%9e%84%e5%bb%ba-ndk-%e9%a1%b9%e7%9b%ae" title="CMake 构建 NDK 项目" &gt;
 CMake 构建 NDK 项目
 
&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#%e5%b8%b8%e7%94%a8%e7%9a%84-android-ndk-%e5%8e%9f%e7%94%9f-api" title="常用的 Android NDK 原生 API" &gt;
 常用的 Android NDK 原生 API
 
&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#%e7%b1%bb%e5%8a%a0%e8%bd%bd%e5%99%a8" title="类加载器" &gt;
 类加载器
 
&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href="#%e5%8f%8c%e4%ba%b2%e5%a7%94%e6%89%98%e6%a8%a1%e5%bc%8f" title="双亲委托模式" &gt;
 双亲委托模式
 
&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#dexpathlist" title="DexPathList" &gt;
 DexPathList
 
&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="art"&gt;ART
&lt;a class="header-anchor" href="#art"&gt;&lt;/a&gt;
&lt;/h1&gt;&lt;p&gt;ART 代表 Android Runtime，其处理应用程序执行的方式完全不同于 Dalvik，Dalvik 是依靠一个 Just-In-Time (JIT) 编译器去解释字节码。开发者编译后的应用代码需要通过一个解释器在用户的设备上运行，这一机制并不高效，但让应用能更容易在不同硬件和架构上运 行。ART 则完全改变了这套做法，在应用安装时就预编译字节码到机器语言，这一机制叫 Ahead-Of-Time (AOT）编译。在移除解释代码这一过程后，应用程序执行将更有效率，启动更快。&lt;/p&gt;</description></item></channel></rss>