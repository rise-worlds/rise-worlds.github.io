<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Reprint on Rise的自留地</title><link>https://blogs.qipai360.cn/categories/reprint/</link><description>Recent content in Reprint on Rise的自留地</description><generator>Hugo</generator><language>zh-CN</language><lastBuildDate>Fri, 29 Aug 2008 10:17:00 +0800</lastBuildDate><atom:link href="https://blogs.qipai360.cn/categories/reprint/rss.xml" rel="self" type="application/rss+xml"/><item><title>The Emergence Of A Theme</title><link>https://blogs.qipai360.cn/post/the-emergence-of-a-theme/</link><pubDate>Fri, 29 Aug 2008 10:17:00 +0800</pubDate><guid>https://blogs.qipai360.cn/post/the-emergence-of-a-theme/</guid><description>&lt;pre&gt;&lt;code&gt;&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt; &amp;lt;blockquote&amp;gt; &amp;lt;p&amp;gt;I'm not sure what it is, but there continues to be some sort of &amp;quot;competition&amp;quot; for &amp;quot;who can find the biggest bug&amp;quot; -- as if attackers had to choose, and more importantly, as if any bug was so big that it could not be made even better by combined use with its &amp;quot;competition&amp;quot;.&amp;amp;nbsp; Before my DNS talk, my old friend FX from Recurity Labs was &amp;lt;a href=&amp;quot;http://www.phenoelit.net/lablog/paradigms/Perception_of_Vulnerabilities.sl&amp;quot;&amp;gt;comparing DNS issues&amp;lt;/a&amp;gt; to the Debian Non-Random Number Generator issue that caused all sorts of SSL certificates to offer no security value, and the SNMPv3 flaws that allowed infrastructure devices to be remotely administered by people who happened not to know the password. &amp;lt;p&amp;gt;Of course, after the talk, it became clear that the DNS hack and the Debian NRNG combined rather destructively -- DNS allowed you to finally play MITM with all the SSL private keys you could trivially compute, and as Ben Laurie found, &amp;lt;a href=&amp;quot;http://seclists.org/fulldisclosure/2008/Aug/0123.html&amp;quot;&amp;gt;this included the keys for Sun's OpenID authentication provider&amp;lt;/a&amp;gt;.&amp;amp;nbsp; And, since the DNS hack turns Java back into a universal UDP and TCP gateway, we end up being able to log into SNMPv3 devices that would otherwise be protected behind firewalls. &amp;lt;p&amp;gt;So there's no sense making a competition out of it.&amp;amp;nbsp; There's just an ever growing toolchest, growing from a single emerging theme: &amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;&amp;lt;b&amp;gt;Weaknesses in authentication and encryption, some which have been known to at least some degree for quite some time and many of which are sourced in the core design of the system, continue to pose a threat to the Internet infrastructure at large, both by corrupting routing, and making those corrupted routes problematic.&amp;lt;/b&amp;gt;&amp;lt;/strong&amp;gt; &amp;lt;p&amp;gt;Back in July, the genuinely brilliant Halvar Flake &amp;lt;a href=&amp;quot;http://addxorrol.blogspot.com/2008/07/all-this-dns.html&amp;quot;&amp;gt;posted the following&amp;lt;/a&amp;gt; regarding the entire DNS issue: &amp;lt;p&amp;gt;&amp;lt;em&amp;gt;&amp;lt;i&amp;gt;&amp;quot;I fail to understand the seriousness with which this bug is handled though. Anybody who uses the Internet has to assume that his gateway is owned.&amp;quot;&amp;lt;/i&amp;gt;&amp;lt;/em&amp;gt; &amp;lt;p&amp;gt;And thus, why 75% of my Black Hat talk was on the real-world effectiveness of Man-In-The-Middle attacks: Most people aren't as smart as Halvar.&amp;amp;nbsp; I'm certainly not :)&amp;amp;nbsp; Almost &amp;lt;em&amp;gt;&amp;lt;i&amp;gt;nobody &amp;lt;/i&amp;gt;&amp;lt;/em&amp;gt;assumes that their gateway is owned -- and even those that do, and try to engineer around it, deploy ineffective protections that are only &amp;quot;secure unless there's an attacker&amp;quot;. &amp;lt;p&amp;gt;I say this is a theme, because it is the unifying element between some of the year's most high profile flaws.&amp;amp;nbsp; There are two subclasses -- some involve weak authentication migrating traffic from one location to another, while others involve weak authentication allowing an attacker to read or modify traffic migrated to him -- but you'd have to have some pretty serious blinders to not see the unifying theme of &amp;lt;strong&amp;gt;&amp;lt;b&amp;gt;weak authentication leads to pwnage.&amp;lt;/b&amp;gt;&amp;lt;/strong&amp;gt; &amp;lt;p&amp;gt;Consider: &amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;&amp;lt;b&amp;gt;Luciano Bello's Debian NRNG: &amp;lt;/b&amp;gt;&amp;lt;/strong&amp;gt;This involves a core design requiring the generation of random numbers, but the random number generator required a random seed, but alas, the seed was made insufficiently random.&amp;amp;nbsp; It's an implementation flaw, but barely -- and the effect was catastrophic failure against members of the X.509 PKI authentication system that had used the Debian NRNG, and thus by extension SSL's encryption logic and OpenID (for Sun's) authentication gateway. &amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;&amp;lt;b&amp;gt;Wes Hardakar's SNMPv3 Bug: &amp;lt;/b&amp;gt;&amp;lt;/strong&amp;gt;Here, we have an authentication protocol that allows an attacker to declare how many bytes he wants to have to correctly provide.&amp;amp;nbsp; Now, the attacker can claim &amp;quot;just 1 please&amp;quot; -- and he gets into any router suffering this bug within seconds.&amp;amp;nbsp; That, by extension, allows control over all traffic traversing that router. &amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;&amp;lt;b&amp;gt;Mike Zusman's Insecure SSL-VPN's: &amp;lt;/b&amp;gt;&amp;lt;/strong&amp;gt;SSL is supposed to protect us, but there's no sense creating a secure session to someone if you don't actually know who they are.&amp;amp;nbsp; Don't worry though, by design anything that &amp;lt;em&amp;gt;&amp;lt;i&amp;gt;isn't&amp;lt;/i&amp;gt;&amp;lt;/em&amp;gt; a web browser is terrifyingly likely to only to skip authentication entirely and just create an encrypted link to whoever's responding.&amp;amp;nbsp; One would think that SSL-VPN's, whose sole purpose is to prevent attackers from accessing network traffic, would be immune.&amp;amp;nbsp; But with 42% of certificates on the Internet being self-signed, and a lot of them being for SSL-VPN's, one would be wrong.&amp;amp;nbsp; By extension this auth failure exposes all traffic routed over these SSL-VPN's. &amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;&amp;lt;b&amp;gt;Mike Perry's Insecure Cookies:&amp;lt;/b&amp;gt;&amp;lt;/strong&amp;gt; This gets interesting.&amp;amp;nbsp; Here we have two different authentication protocols in place -- one, from server to client, based on X.509.&amp;amp;nbsp; The other, from client to server, based on a plaintext password (delivered, at least, over an encrypted session authenticated by the server-to-client cert).&amp;amp;nbsp; But to prevent the user from needing to repeatedly type in their plaintext password, a password-equivalent token (or cookie) is handed to the user's browser, which will be attached to every request within the securely encrypted channel.&amp;amp;nbsp; Unfortunately, it'll also be attached to every request which does &amp;lt;em&amp;gt;&amp;lt;i&amp;gt;not&amp;lt;/i&amp;gt;&amp;lt;/em&amp;gt; traverse the securely encrypted channel, because the cookies aren't marked for secure-only.&amp;amp;nbsp; Once the cookie leaks, of course, it'll authenticate a bad guy who creates an encrypted session to that server.&amp;amp;nbsp; So by extension bad guys get to play in any number of interesting sites. &amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;&amp;lt;b&amp;gt;My DNS flaw:&amp;lt;/b&amp;gt;&amp;lt;/strong&amp;gt; Here we have a protocol that directly controls routing decisions, ultimately designed to authenticate its messages via a random number between 0 and 65535.&amp;amp;nbsp; Guess the number, and change routing.&amp;amp;nbsp; This was &amp;lt;em&amp;gt;&amp;lt;i&amp;gt;supposed&amp;lt;/i&amp;gt;&amp;lt;/em&amp;gt; to be OK, because you could only guess a certain number of times per day.&amp;amp;nbsp; There was even an RFC entirely based around this time limit.&amp;amp;nbsp; It turns out there's a good dozen ways around that limit, allowing anonymous and even almost 100% packet spoofed compromise of routing decisions.&amp;amp;nbsp; This, by extension, allowed exploitation of all traffic that was weakly authenticating. &amp;lt;p&amp;gt;It's the same story, again and again.&amp;amp;nbsp; And now, everyone talking about BGP.&amp;amp;nbsp; So lets do the same sort of analysis on BGP: &amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;&amp;lt;b&amp;gt;Kapela and Pilosov's BGP flaw:&amp;lt;/b&amp;gt;&amp;lt;/strong&amp;gt; In BGP, only the nearest neighbor is authenticated.&amp;amp;nbsp; The concept is that all &amp;quot;members of the club&amp;quot; authenticate all other members, while the actual data they provide and distribute is trusted.&amp;amp;nbsp; If it's not actually trusted, anyone can hijack traffic from anyone else's routes. &amp;lt;p&amp;gt;Pilosov's done some cool work here.&amp;amp;nbsp; It's not the sort of devastating surprise some people seem to want it to be.&amp;amp;nbsp; Indeed, that's what makes it so interesting.&amp;amp;nbsp; BGP was &amp;lt;em&amp;gt;&amp;lt;i&amp;gt;actually supposed to be broken, in this precise manner.&amp;lt;/i&amp;gt;&amp;lt;/em&amp;gt; Literally, in every day use, any BGP administrator has always had the ability to hijack anyone else's traffic.&amp;amp;nbsp; Pilosov has a new, even beautiful MITM attack, but as mine was not the first DNS attack, his is not the first BGP MITM.&amp;amp;nbsp; Tales of using BGP to force traffic through a compromised router (possibly compromised through SNMPv3) are legion, and Javascript and the browser DOM blur things pretty fiercely in terms of the relevance of being able to pass through to the legitimate endpoint anyway. &amp;lt;p&amp;gt;That's not to take away from the work.&amp;amp;nbsp; It's an interesting trick.&amp;amp;nbsp; But we need to level set here: &amp;lt;p&amp;gt;First, if you're not part of the BGP club, you're just not running this attack.&amp;amp;nbsp; Pakistan took out YouTube with BGP -- but some random kid with the ability to spoof IP packets couldn't.&amp;amp;nbsp; In other words, we're just not going to see a Metasploit module anyone can run to complete these sorts of attacks.&amp;amp;nbsp; Now, there are some entertaining combinatorics that could be played -- DNS to enable Java's SNMPv3 access to internal routers at an ISP, and then from that internal router running the sort of BGP tricks Pilosov's talking about.&amp;amp;nbsp; This goes back to the utter folly of trying to rank these bugs independently from one another.&amp;amp;nbsp; But these sort of combinatorics are at a fundamentally different level than the fire-and-forget antics that DNS allowed, and on a fundamental level, the number of potential attackers (and the number of involved defenders) on BGP is a lot lower. &amp;lt;p&amp;gt;Second, we have far better logging -- and thus accountability -- in the BGP realm than we do perhaps for any other protocol on the Internet.&amp;amp;nbsp; Consider the archives &amp;lt;a href=&amp;quot;http://thyme.apnic.net/&amp;quot;&amp;gt;at APNIC&amp;lt;/a&amp;gt; -- yes, that's route history going back to &amp;lt;em&amp;gt;&amp;lt;i&amp;gt;1999&amp;lt;/i&amp;gt;&amp;lt;/em&amp;gt; -- and &amp;lt;a href=&amp;quot;http://www.renesys.com/&amp;quot;&amp;gt;Renesys&amp;lt;/a&amp;gt; has even more.&amp;amp;nbsp; That sort of forensic data is unimaginable for anything else, least of all DNS.&amp;amp;nbsp; BGP may have its fair share of bad actors -- consider spammers who advertise temporary ranges in unused space for mail delivery purposes, thus getting around blackholes -- but any of the really nasty stuff leaves a paper trail unmatched by any other attack. &amp;lt;p&amp;gt;Third, BGP is something of a sledgehammer.&amp;amp;nbsp; Yes, you're grabbing traffic -- but your control over exactly what traffic you grab is fairly limited.&amp;amp;nbsp; Contrast that with DNS, which allows astonishingly fine grained targeting over exactly what you grab -- indeed, you don't even need to know in advance what traffic you want.&amp;amp;nbsp; The victim network will simply offer you interesting names, and you get to choose on the fly which ones you'll take.&amp;amp;nbsp; These names may even be internal names, offering the impossible-with-BGP attack of hijacking traffic between two hosts on the exact same network segment. &amp;lt;p&amp;gt;Finally, BGP suffers some limitations in visibility.&amp;amp;nbsp; Simply grabbing traffic is nice, but bidirectional flows are better than unidirectional flows, and when you pull something off via DNS, you're pretty much guaranteed to grab all the traffic from that TCP session even if you stop any further poisoning attempts.&amp;amp;nbsp; Contrast that with BGP, which operates at Layer 3 and thus may cause the IP packets to reroute at any point when the TCP socket is still active. &amp;lt;p&amp;gt;So, does that mean its always better to attack DNS than BGP?&amp;amp;nbsp; Oh, you competitive people would like things to be so simple, wouldn't you &amp;lt;img border=&amp;quot;0&amp;quot; alt=&amp;quot;:)&amp;quot; src=&amp;quot;cid:image001.gif@01C908F8.E8E197E0&amp;quot; width=&amp;quot;15&amp;quot; height=&amp;quot;15&amp;quot;&amp;gt;Pilosov and I talked for about a half hour at Defcon, and I've got nothing but respect for his work.&amp;amp;nbsp; Lets look at the other side of things for a moment.&amp;amp;nbsp;&amp;amp;nbsp; First, BGP controls how you route to your name server -- if not your recursive server, which may be inside your organization and thus immune to ext&amp;lt;/p&amp;gt;&amp;lt;/blockquote&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</description></item></channel></rss>